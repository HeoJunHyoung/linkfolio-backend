name: linkfolio CI/CD with Docker and ArgoCD (Full Build)

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  # CI/CD 잡에서 공통으로 사용할 서비스 목록을 'env'에 정의
  # ㄴ service 추가 시, 여기에도 추가해야 함
  SERVICES_MATRIX: '["apigateway-service", "user-service"]'
  # CD 잡의 kustomize 루프에서 사용할 이름 목록 ('-service' 제거됨)
  SERVICES_KUSTOMIZE: 'apigateway user'

jobs:
  # -----------------------------------------------------------------
  # Job 1: 1. 루트 빌드 (1회)
  # -----------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    outputs:
      SHORT_SHA: ${{ steps.sha.outputs.short }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Get short SHA
        id: sha
        run: echo "short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # 루트 pom.xml을 사용하여 전체 모듈을 한 번에 빌드 및 패키징
      - name: Build all modules with Maven
        run: mvn -B -DskipTests package

      # 빌드된 .jar 파일들을 후속 Job(docker-push)에서 사용할 수 있도록 'Artifact'로 업로드
      - name: Upload apigateway-service artifact
        uses: actions/upload-artifact@v4
        with:
          name: apigateway-service-jar
          path: apigateway-service/target/*.jar

      - name: Upload user-service artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-service-jar
          path: user-service/target/*.jar

  # -----------------------------------------------------------------
  # Job 2: 2. Docker 이미지 빌드 및 푸시 (서비스별 병렬 처리)
  # -----------------------------------------------------------------
  docker-push:
    runs-on: ubuntu-latest
    needs: build # 👈 'build' Job에 의존
    strategy:
      matrix:
        service: ${{ fromJson(env.SERVICES_MATRIX) }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/

      - name: Get short SHA
        id: sha
        run: echo "short=${{ needs.build.outputs.SHORT_SHA }}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 셸을 이용해 동적으로 이미지 태그 이름 생성
      - name: Build and push Docker image
        id: build_and_push
        run: |
          SERVICE_NAME=$(echo ${{ matrix.service }} | sed 's/-service//')
          echo "Building Docker image for h6bro/service-${SERVICE_NAME}:${{ steps.sha.outputs.short }}"
          docker build -t h6bro/service-${SERVICE_NAME}:${{ steps.sha.outputs.short }} -f ./${{ matrix.service }}/Dockerfile ./${{ matrix.service }}
          docker push h6bro/service-${SERVICE_NAME}:${{ steps.sha.outputs.short }}


  # -----------------------------------------------------------------
  # Job 3: 3. 매니페스트 이미지 태그 업데이트
  # -----------------------------------------------------------------
  cd:
    runs-on: ubuntu-latest
    needs: [build, docker-push] # 'docker-push'가 완료되어야 실행

    steps:
      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          repository: HeoJunHyoung/linkfolio-manifest
          ref: dev
          token: ${{ secrets.GH_TOKEN }}
          path: linkfolio-manifest

      - name: Set SHORT_SHA env
        run: echo "SHORT_SHA=${{ needs.build.outputs.SHORT_SHA }}" >> $GITHUB_ENV

      # 'env'에 정의된 서비스 이름 목록을 사용
      - name: Update image tags with Kustomize
        run: |
          cd linkfolio-manifest/overlays/development
          for SERVICE in ${{ env.SERVICES_KUSTOMIZE }}; do
            echo "Updating image for h6bro/service-$SERVICE..."
            kustomize edit set image h6bro/service-${SERVICE}=h6bro/service-${SERVICE}:${{ env.SHORT_SHA }}
          done

      - name: Commit and push changes
        run: |
          cd linkfolio-manifest
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          # (개선) kustomization.yaml 파일이 변경되었는지 확인
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected. Committing and pushing..."
            git commit -m "🔄 [CI/CD] Update image tags to ${{ env.SHORT_SHA }}"
            git push
          else
            echo "No image tag changes detected."
          fi